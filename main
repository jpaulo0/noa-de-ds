import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;

public class AgendaApp extends Application {

    private ListView<Pessoa> listView;

    @Override
    public void start(Stage primaryStage) {
        Database.init();

        // T√≠tulo principal
        Label titleLabel = new Label("üì± Agenda F√°cil");
        titleLabel.setFont(Font.font("Arial", FontWeight.BOLD, 24));
        titleLabel.setTextFill(Color.DARKBLUE);
        
        Label subtitleLabel = new Label("Gerencie seus contatos de forma simples");
        subtitleLabel.setFont(Font.font("Arial", 14));
        subtitleLabel.setTextFill(Color.GRAY);

        // Lista de contatos
        listView = new ListView<>();
        listView.setPrefHeight(200);
        listView.setStyle("-fx-border-color: #cccccc; -fx-border-radius: 5;");
        
        // Set placeholder for empty list
        Label placeholder = new Label("üìù Nenhum contato cadastrado. Adicione o primeiro contato!");
        placeholder.setStyle("-fx-text-fill: #666666; -fx-font-style: italic;");
        listView.setPlaceholder(placeholder);
        
        // Set cell factory for proper display
        listView.setCellFactory(param -> new ListCell<Pessoa>() {
            @Override
            protected void updateItem(Pessoa pessoa, boolean empty) {
                super.updateItem(pessoa, empty);
                if (empty || pessoa == null) {
                    setText(null);
                } else {
                    String telefone = pessoa.getTelefone() != null && !pessoa.getTelefone().isEmpty() ? " | " + pessoa.getTelefone() : "";
                    String email = pessoa.getEmail() != null && !pessoa.getEmail().isEmpty() ? " | " + pessoa.getEmail() : "";
                    setText(pessoa.getId() + ": " + pessoa.getNome() + telefone + email);
                }
            }
        });
        
        atualizarLista();

        // Campos de entrada
        Label formLabel = new Label("Adicionar Novo Contato");
        formLabel.setFont(Font.font("Arial", FontWeight.BOLD, 16));
        formLabel.setTextFill(Color.DARKGREEN);

        TextField nomeField = new TextField();
        nomeField.setPromptText("Digite o nome completo");
        nomeField.setPrefHeight(35);
        nomeField.setStyle("-fx-border-color: #4CAF50; -fx-border-radius: 5; -fx-padding: 8;");

        TextField telField = new TextField();
        telField.setPromptText("Digite o telefone (ex: (11) 99999-9999)");
        telField.setPrefHeight(35);
        telField.setStyle("-fx-border-color: #4CAF50; -fx-border-radius: 5; -fx-padding: 8;");

        TextField emailField = new TextField();
        emailField.setPromptText("Digite o email (ex: nome@email.com)");
        emailField.setPrefHeight(35);
        emailField.setStyle("-fx-border-color: #4CAF50; -fx-border-radius: 5; -fx-padding: 8;");

        // Bot√µes com estilo
        Button addBtn = new Button("‚úÖ Adicionar Contato");
        addBtn.setPrefHeight(40);
        addBtn.setPrefWidth(200);
        addBtn.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-weight: bold; -fx-border-radius: 5;");
        addBtn.setOnMouseEntered(e -> addBtn.setStyle("-fx-background-color: #45a049; -fx-text-fill: white; -fx-font-weight: bold; -fx-border-radius: 5;"));
        addBtn.setOnMouseExited(e -> addBtn.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-weight: bold; -fx-border-radius: 5;"));
        
        addBtn.setOnAction(e -> {
            String nome = nomeField.getText().trim();
            String telefone = telField.getText().trim();
            String email = emailField.getText().trim();
            
            if (nome.isEmpty()) {
                mostrarAlerta("Erro", "O nome √© obrigat√≥rio!", Alert.AlertType.WARNING);
                return;
            }
            
            Pessoa p = new Pessoa(0, nome, telefone, email);
            boolean sucesso = PessoaDAO.inserirPessoa(p);
            if (sucesso) {
                atualizarLista();
                nomeField.clear(); telField.clear(); emailField.clear();
                mostrarAlerta("Sucesso", "Contato adicionado com sucesso!", Alert.AlertType.INFORMATION);
            } else {
                mostrarAlerta("Erro", "Falha ao adicionar contato. Verifique a conex√£o com o banco de dados.", Alert.AlertType.ERROR);
            }
        });

        Button delBtn = new Button("üóëÔ∏è Excluir Selecionado");
        delBtn.setPrefHeight(40);
        delBtn.setPrefWidth(200);
        delBtn.setStyle("-fx-background-color: #f44336; -fx-text-fill: white; -fx-font-weight: bold; -fx-border-radius: 5;");
        delBtn.setOnMouseEntered(e -> delBtn.setStyle("-fx-background-color: #da190b; -fx-text-fill: white; -fx-font-weight: bold; -fx-border-radius: 5;"));
        delBtn.setOnMouseExited(e -> delBtn.setStyle("-fx-background-color: #f44336; -fx-text-fill: white; -fx-font-weight: bold; -fx-border-radius: 5;"));
        
        delBtn.setOnAction(e -> {
            Pessoa selected = listView.getSelectionModel().getSelectedItem();
            if (selected != null) {
                Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
                confirmAlert.setTitle("Confirmar Exclus√£o");
                confirmAlert.setHeaderText("Excluir Contato");
                confirmAlert.setContentText("Tem certeza que deseja excluir este contato?");
                
                if (confirmAlert.showAndWait().get() == ButtonType.OK) {
                    boolean sucesso = PessoaDAO.deletarPessoa(selected.getId());
                    if (sucesso) {
                        atualizarLista();
                        mostrarAlerta("Sucesso", "Contato exclu√≠do com sucesso!", Alert.AlertType.INFORMATION);
                    } else {
                        mostrarAlerta("Erro", "Falha ao excluir contato. Verifique se o contato ainda existe.", Alert.AlertType.ERROR);
                    }
                }
            } else {
                mostrarAlerta("Aviso", "Selecione um contato para excluir!", Alert.AlertType.WARNING);
            }
        });

        // Layout dos bot√µes
        HBox buttonBox = new HBox(10, addBtn, delBtn);
        buttonBox.setAlignment(Pos.CENTER);

        // Layout dos campos
        VBox formBox = new VBox(10);
        formBox.getChildren().addAll(formLabel, nomeField, telField, emailField, buttonBox);
        formBox.setPadding(new Insets(15));
        formBox.setStyle("-fx-background-color: #f8f9fa; -fx-border-color: #e9ecef; -fx-border-radius: 8;");

        // Lista com t√≠tulo
        Label listLabel = new Label("Lista de Contatos");
        listLabel.setFont(Font.font("Arial", FontWeight.BOLD, 16));
        listLabel.setTextFill(Color.DARKBLUE);

        VBox listBox = new VBox(10, listLabel, listView);
        listBox.setPadding(new Insets(15));

        // Layout principal
        VBox headerBox = new VBox(5, titleLabel, subtitleLabel);
        headerBox.setAlignment(Pos.CENTER);
        headerBox.setPadding(new Insets(20, 15, 15, 15));
        headerBox.setStyle("-fx-background-color: linear-gradient(to bottom, #e3f2fd, #ffffff);");

        VBox root = new VBox(15);
        root.getChildren().addAll(headerBox, formBox, listBox);
        root.setPadding(new Insets(0, 15, 15, 15));
        root.setStyle("-fx-background-color: #ffffff;");

        Scene scene = new Scene(root, 500, 650);
        primaryStage.setTitle("Agenda F√°cil - JavaFX");
        primaryStage.setScene(scene);
        primaryStage.setResizable(false);
        primaryStage.show();
    }

    private void atualizarLista() {
        listView.getItems().clear();
        listView.getItems().addAll(PessoaDAO.listarPessoas());
    }
    
    private void mostrarAlerta(String titulo, String mensagem, Alert.AlertType tipo) {
        Alert alert = new Alert(tipo);
        alert.setTitle(titulo);
        alert.setHeaderText(null);
        alert.setContentText(mensagem);
        alert.showAndWait();
    }
}


##-Moedel
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class Database {
    private static final String URL = "jdbc:sqlite:agenda.db";
    
    public static void init() {
        try (Connection conn = connect(); Statement stmt = conn.createStatement()) {
            String sql = "CREATE TABLE IF NOT EXISTS pessoas (" +
                        "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                        "nome TEXT NOT NULL," +
                        "telefone TEXT," +
                        "email TEXT" +
                        ");";
            stmt.execute(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public static Connection connect() {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(URL);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return conn;
    }
}
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PessoaDAO {

    public static boolean inserirPessoa(Pessoa pessoa) {
        String sql = "INSERT INTO pessoas(nome, telefone, email) VALUES (?, ?, ?)";
        try (Connection conn = Database.connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            if (conn == null) {
                System.err.println("Erro: Falha na conex√£o com o banco de dados");
                return false;
            }
            stmt.setString(1, pessoa.getNome());
            stmt.setString(2, pessoa.getTelefone());
            stmt.setString(3, pessoa.getEmail());
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            System.err.println("Erro ao inserir pessoa: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    public static List<Pessoa> listarPessoas() {
        List<Pessoa> pessoas = new ArrayList<>();
        String sql = "SELECT * FROM pessoas";
        try (Connection conn = Database.connect(); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            if (conn == null) {
                System.err.println("Erro: Falha na conex√£o com o banco de dados");
                return pessoas; // retorna lista vazia
            }
            while (rs.next()) {
                pessoas.add(new Pessoa(
                        rs.getInt("id"),
                        rs.getString("nome"),
                        rs.getString("telefone"),
                        rs.getString("email")
                ));
            }
        } catch (SQLException e) {
            System.err.println("Erro ao listar pessoas: " + e.getMessage());
            e.printStackTrace();
        }
        return pessoas;
    }

    public static boolean deletarPessoa(int id) {
        String sql = "DELETE FROM pessoas WHERE id = ?";
        try (Connection conn = Database.connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            if (conn == null) {
                System.err.println("Erro: Falha na conex√£o com o banco de dados");
                return false;
            }
            stmt.setInt(1, id);
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            System.err.println("Erro ao deletar pessoa: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
}



import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class Database {
    private static final String URL = "jdbc:sqlite:agenda.db";
    
    public static void init() {
        try (Connection conn = connect(); Statement stmt = conn.createStatement()) {
            String sql = "CREATE TABLE IF NOT EXISTS pessoas (" +
                        "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                        "nome TEXT NOT NULL," +
                        "telefone TEXT," +
                        "email TEXT" +
                        ");";
            stmt.execute(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public static Connection connect() {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(URL);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return conn;
    }
}
import javafx.geometry.Pos;
import javafx.event.EventHandler;
import javafx.event.ActionEvent;

public class Main extends Application 
{ 
  
  @Override
  public void start(Stage primaryStage) {
    
    Label label; 
    TextField tf;
    Button button;
    VBox vbox;
    Scene scene;
    
    tf = new TextField("Text Field!");
    tf.setMaxWidth(200);

    label = new Label("Type text and click the button");
    button = new Button("Click"); 

    button.setOnAction(new EventHandler<ActionEvent>() {
      @Override public void handle(ActionEvent e) {
        label.setText(tf.getText());
      }
    });

    vbox = new VBox(label, tf, button);
    vbox.setSpacing(20);
    vbox.setAlignment(Pos.CENTER);
    scene = new Scene(vbox, 300, 200);
    
    primaryStage.setTitle("A Simple Scene!");
    primaryStage.setScene(scene);
    primaryStage.show();
  } 
    
  public static void main(String[] args) {
    launch(args);
  }
} 
